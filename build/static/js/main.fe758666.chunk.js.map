{"version":3,"sources":["assets/css/assets.module.css","markets/css/markets.module.css","css/app.module.css","assets/css/listing.module.css","nav/nav.tsx","assets/listing.tsx","assets/assets.tsx","graph/graph.tsx","markets/listing.tsx","markets/markets.tsx","spinner/spinner.tsx","app.tsx","index.tsx","markets/css/listing.module.css","spinner/css/spinner.module.css","nav/css/nav.module.css"],"names":["module","exports","Nav","className","styles","navWrapper","branding","Listing","props","useState","niceName","setNiceName","niceSymbol","setNiceSymbol","useEffect","axios","get","pair","then","res","data","val","name","symbol","selectedAsset","index","listingWrapperActive","listingWrapperInactive","onClick","setSelectedAsset","getInfo","market","listSymbol","listName","pairName","Assets","assetsWrapper","markets","selectedMarket","length","exchange","assetsList","pairs","map","row","route","getList","Graph","chart","render","options","onRef","ref","setMarket","listExchange","Markets","marketsWrapper","marketsList","Spinner","spinnerOverlay","src","alt","spinner","loadingTxt","require","App","graphOptions","setGraphOptions","setMarkets","setSelectedMarket","currency","assetPrice","setAssetPrice","displayLoadingSpinner","setDisplayLoadingSpinner","period","cleanGraphData","formattedDataPoints","forEach","closeTime","Date","closePrice","push","x","y","theme","title","text","axisX","gridThickness","axisY","prefix","type","xValueType","yValueFormatString","dataPoints","response","catch","err","console","error","undefined","price","info","ohlc","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.fe758666.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"assetsWrapper\":\"assets_assetsWrapper__nTReK\",\"assetsList\":\"assets_assetsList__dOUY2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"marketsWrapper\":\"markets_marketsWrapper__3Gn5o\",\"marketsList\":\"markets_marketsList__3rBAb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"price\":\"app_price__2UKyx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"listingWrapperInactive\":\"listing_listingWrapperInactive__2y7oO\",\"listingWrapperActive\":\"listing_listingWrapperActive__2e2cs\",\"listSymbol\":\"listing_listSymbol__TNp-m\",\"listName\":\"listing_listName__RQHJc\",\"pairName\":\"listing_pairName__3SxqC\"};","import React from 'react'\nimport styles from './css/nav.module.css'\n\n/**\n * Represents the header. Additional navigation to pages should go here.\n * @constructor\n */\nfunction Nav () {\n  return (\n  <div className={styles.navWrapper}>\n    <span className={styles.branding}>Crypto-Charts</span>\n  </div>\n  )\n}\n\nexport default Nav\n","import React, { useState, useEffect } from 'react'\nimport axios from 'axios'\nimport styles from './css/listing.module.css'\n\ntype listingProps = {\n  pair: string;\n  route: string;\n  index: number;\n  market: string;\n  getInfo: any;\n  selectedAsset: number;\n  setSelectedAsset: any;\n}\n\n/**\n * Represents a single asset list (ie bitcoin). client/src/assets/listing.jsx\n * @param {object} props - The react props.\n * @param {string} props.pair - See: https://docs.cryptowat.ch/rest-api/pairs\n * @param {string} props.route - See: https://docs.cryptowat.ch/rest-api/pairs\n * @param {number} props.selectedAsset - The user selected asset. This is an index relating to the available assets array.\n * @param {function} props.setAsset - Function to call when a user clicks on an asset.\n * @param {function} props.getInfo - Function which fetches the information for a given asset.\n * @param {string} props.market - The market name.\n * @param {number} props.index - The index of the asset listing in relation to the assets list.\n * @param {funciton} props.setSelectedAsset - Function to set the selected asset state.\n */\nfunction Listing (props: listingProps) {\n  const [niceName, setNiceName] = useState('')\n  const [niceSymbol, setNiceSymbol] = useState('')\n\n  function getPairNiceName () {\n    axios.get(`/api/pairinfo/${props.pair}`).then(res => {\n      setNiceName(res.data.val.name)\n      setNiceSymbol(res.data.val.symbol)\n    })\n  }\n\n  function getListingStyle () {\n    if (props.selectedAsset === props.index) {\n      return styles.listingWrapperActive\n    }\n\n    return styles.listingWrapperInactive\n  }\n\n  function handleClick () {\n    props.setSelectedAsset(props.index)\n    props.getInfo(props.pair, props.market, niceName)\n  }\n\n  useEffect(() => {\n    getPairNiceName()\n  }, [props.pair])\n\n  return (\n  <button className={getListingStyle()} onClick={handleClick}>\n    <span className={styles.listSymbol}>{niceSymbol}</span>\n    <span className={styles.listName}>{niceName}</span>\n    <span className={styles.pairName}>{props.pair}</span>\n  </button>\n  )\n}\n\nexport default Listing\n","import React, { useState } from 'react'\nimport styles from './css/assets.module.css'\nimport Listing from './listing'\n\ntype pair = {\n  pair: string;\n  route: string;\n}\n\ninterface market {\n  exchange: string;\n  pairs: pair[];\n}\n\ntype assetsProps = {\n  markets: market[];\n  selectedMarket: number;\n  getInfo: any;\n}\n\n/**\n * Represents all the available assets ('ie coins') for the selected market.\n * @param {object} props - The react props.\n * @param {array} - The available markets.\n * @param {number} - The user selected index relating to props.markets.\n * @param {function} props.getInfo - The function that is called after selecting an asset, which gets the asset info. Passed down to the asset calling upon clicking.\n */\nfunction Assets (props: assetsProps) {\n  const [selectedAsset, setSelectedAsset] = useState(0)\n\n  function getList () {\n    const market = props.markets[props.selectedMarket]\n\n    if (props.markets.length > 0) {\n      return (\n        <div>\n          <h2>Assets for {market.exchange}</h2>\n          <div className={styles.assetsList}>\n            {\n              market.pairs.map((row: any, index: any) => {\n                return <Listing pair={row.pair} route={row.route} index={index} key={index} market={market.exchange} getInfo={props.getInfo} selectedAsset={selectedAsset} setSelectedAsset={setSelectedAsset}/>\n              })\n            }\n          </div>\n        </div>\n      )\n    } else {\n      return (\n        <div></div>\n      )\n    }\n  }\n\n  return (\n  <div className={styles.assetsWrapper}>\n    {getList()}\n  </div>\n  )\n}\n\nexport default Assets\n","import { CanvasJSChart } from 'canvasjs-react-charts'\nimport React, { useEffect } from 'react'\n\ntype graphProps = {\n  options: object;\n}\n\n/**\n * Represents the visual graph. Currently uses CanvasJS.\n * @param {object} props - The react props.\n * @param {object} props.options - The settings and data for the graph to display.\n */\nfunction Graph (props: graphProps) {\n  let chart: any\n  chart = null\n\n  useEffect(() => {\n    if (chart !== null) {\n      chart.render()\n    }\n  }, [props.options])\n\n  return (\n  <div className=\"graphWrapper\">\n    <CanvasJSChart options={props.options} onRef={ ref => { chart = ref } }/>\n  </div>\n  )\n}\n\nexport default Graph\n","import React from 'react'\nimport styles from './css/listing.module.css'\n\ntype listingProps = {\n  index: number;\n  data: any;\n  selectedMarket: number;\n  setMarket: any;\n}\n/**\n * Represents a single market listing. client/src/markets/listing.jsx\n * @param {object} props - The react props.\n * @param {number} props.index - The index of this listing in regards to the markets list.\n * @param {object} props.data - The data of the market, which contains the exchange name.\n * @param {number} props.selectedMarket - The current selected market. Used to highlight this listing if it matches the props.index.\n * @param {function} props.setMarket - The function to call upon a user click, which sets the market.\n */\nfunction Listing (props: listingProps) {\n  function getListingStyle () {\n    if (props.selectedMarket === props.index) {\n      return styles.listingWrapperActive\n    }\n\n    return styles.listingWrapperInactive\n  }\n\n  function handleClick () {\n    props.setMarket(props.index)\n  }\n\n  return (\n  <button className={getListingStyle()} onClick={handleClick}>\n    <span className={styles.listExchange}>{props.data.exchange}</span>\n  </button>\n  )\n}\n\nexport default Listing\n","import React from 'react'\nimport styles from './css/markets.module.css'\nimport Listing from './listing'\n\ntype marketsProps = {\n  markets: any[];\n  selectedMarket: number;\n  setMarket: any;\n}\n/**\n *\n * @param {object} props - The react props.\n * @param {array} props.markets - The markets array to propigate the list with.\n * @param {number} props.selectedMarket - The user selected market. This is the index in regards to props.markets. Passed down to the individual listing for highlighting.\n * @param {function} props.setMarket - The function to update the user selected market with. This is passed down to the individual market listing, so it can be called upon click.\n */\nfunction Markets (props: marketsProps) {\n  return (\n    <div className={styles.marketsWrapper}>\n      <h2>Markets</h2>\n      <div className={styles.marketsList}>\n        {\n          props.markets.map((row: any, index: any) => {\n            return <Listing data={row} index={index} key={index} selectedMarket={props.selectedMarket} setMarket={props.setMarket}/>\n          })\n        }\n      </div>\n    </div>\n  )\n}\n\nexport default Markets\n","import React from 'react'\nimport styles from './css/spinner.module.css'\n\ntype spinnerProps = {\n  displayLoadingSpinner: boolean;\n}\n/**\n * Represents the loading spinner\n * @constructor\n */\nfunction Spinner (props: spinnerProps) {\n  return (\n    <div className={styles.spinnerOverlay}>\n        <img src=\"spinner.gif\" alt=\"loading spinner\" className={styles.spinner}></img>\n        <span className={styles.loadingTxt}>Loading...</span>\n    </div>\n  )\n}\n\nexport default Spinner\n","import React, { useState, useEffect } from 'react'\nimport styles from './css/app.module.css'\nimport Nav from './nav/nav'\nimport Assets from './assets/assets'\nimport Graph from './graph/graph'\nimport Markets from './markets/markets'\nimport Spinner from './spinner/spinner'\nconst axios = require('axios')\n\n/**\n * Represents the main entry point for the client application.\n * @constructor\n */\nfunction App () {\n  type pair = {\n    pair: string;\n    route: string;\n  }\n\n  interface market {\n    exchange: string;\n    pairs: pair[];\n  }\n\n  const [graphOptions, setGraphOptions] = useState({})\n  const [markets, setMarkets] = useState<market[]>([])\n  const [selectedMarket, setSelectedMarket] = useState(0)\n  const [currency] = useState('usd')\n  const [assetPrice, setAssetPrice] = useState(0)\n  const [displayLoadingSpinner, setDisplayLoadingSpinner] = useState(false)\n  const [period] = useState(604800)\n\n  /**\n   * Set the market for the user. This should also updates the currencies available to the user.\n   * @param {number} index - The index of the market on https://docs.cryptowat.ch/rest-api/markets\n   */\n  function setMarket (index: number) {\n    if (markets[index] !== undefined) {\n      setSelectedMarket(index)\n    }\n  }\n\n  type datePoint = {\n    x: Date;\n    y: Date;\n  }\n\n  /**\n   * Prepares and sets the graph data.\n   * @param {array} data - This should be the OHLC candlestick data.\n   * @param {string} niceName - Title for the graph.\n   */\n  function cleanGraphData (data: any, niceName = '') {\n    const formattedDataPoints: Array<datePoint> = []\n\n    data[period].forEach((row: any) => {\n      // Unix time\n      const closeTime = new Date(row[0] * 1000)\n      const closePrice = row[4]\n      formattedDataPoints.push({ x: closeTime, y: closePrice })\n    })\n\n    setGraphOptions({\n      theme: 'light2',\n      title: {\n        text: `${markets[selectedMarket].exchange}: ${niceName}`\n      },\n      axisX: {\n        text: 'timeline',\n        gridThickness: 2\n      },\n      axisY: {\n        title: 'Price in USD',\n        prefix: '$'\n      },\n      data: [{\n        type: 'line',\n        xValueType: 'dateTime',\n        yValueFormatString: '$#,##0.00',\n        dataPoints: formattedDataPoints\n      }]\n    })\n  }\n\n  /**\n   * Request all relevant asset data from the ExpressJS server, then call cleanGraphData to display it on the graph.\n   * @param {string} pair - See: https://docs.cryptowat.ch/rest-api/pairs\n   * @param {string} market - See: https://docs.cryptowat.ch/rest-api/markets\n   * @param {string} niceName - Passed to cleanGraphData for the Graph title.\n   */\n  function getInfo (pair: string, market: string, niceName = '') {\n    setDisplayLoadingSpinner(true)\n\n    axios.get(`/api/info/${market}/${pair}/${currency}`).then((response: any) => {\n      return response.data\n    }).then((info: any) => {\n      setAssetPrice(info.val.price)\n      cleanGraphData(info.val.ohlc, niceName)\n      setDisplayLoadingSpinner(false)\n    }).catch((err: string) => {\n      console.error(err)\n      setDisplayLoadingSpinner(false)\n    })\n  }\n\n  /**\n   * Fetches all available markets for the 'currency' state.\n   */\n  function getMarkets () {\n    setDisplayLoadingSpinner(true)\n\n    axios.get(`/api/markets/${currency}`).then((response: any) => {\n      setMarkets(response.data.val)\n      setDisplayLoadingSpinner(false)\n      return response.data\n    }).catch((err: string) => {\n      setDisplayLoadingSpinner(false)\n      console.error(err)\n    })\n  }\n\n  /**\n   * Returns the loading spinner if the state 'displayLoadingSpinner' is set to true.\n   * @param {boolean} status - The React state 'displayLoadingSpinner'\n   */\n  function getLoadingSpinner () {\n    if (displayLoadingSpinner) {\n      return <Spinner displayLoadingSpinner={displayLoadingSpinner}/>\n    } else {\n      return <span></span>\n    }\n  }\n\n  /**\n   * Calls getMarkets() at initial load.\n   */\n  useEffect(() => {\n    getMarkets()\n  }, [])\n\n  return (\n    <div className=\"container-fluid\">\n      {getLoadingSpinner()}\n      <div className=\"row\">\n        <div className=\"col-12\">\n          <Nav/>\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col-lg-2 col-md-12 col-sm-12 col-12\">\n          <Markets markets={markets} selectedMarket={selectedMarket} setMarket={setMarket}/>\n        </div>\n        <div className=\"col-lg-8 col-md-6 col-sm-12 col-12\">\n          <Graph options={graphOptions}/>\n          { assetPrice\n            ? <div className={styles.price}>{currency}: {assetPrice}</div>\n            : null}\n        </div>\n        <div className=\"col-lg-2 col-md-6 col-sm-12 col-12\">\n          <Assets markets={markets} selectedMarket={selectedMarket} getInfo={getInfo}/>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './app'\n\nReactDOM.render(<App />, document.getElementById('app'))\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"listingWrapperInactive\":\"listing_listingWrapperInactive__1grBe\",\"listingWrapperActive\":\"listing_listingWrapperActive__U50HP\",\"listExchange\":\"listing_listExchange__3gZc2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"spinnerOverlay\":\"spinner_spinnerOverlay__3QjZd\",\"spinner\":\"spinner_spinner__1sM1_\",\"loadingTxt\":\"spinner_loadingTxt__1X1OQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navWrapper\":\"nav_navWrapper__7qWpw\",\"branding\":\"nav_branding__33yBD\"};"],"sourceRoot":""}